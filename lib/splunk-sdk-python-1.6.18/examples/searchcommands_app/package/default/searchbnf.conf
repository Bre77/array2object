# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)

[countmatches-command]
syntax = COUNTMATCHES FIELDNAME=<fieldname> PATTERN=<regular_expression> <field_list>
alias =
shortdesc = Counts the number of non-overlapping matches to a regular expression in a search result.
description = \
    This command augments records with a count of the number of non-overlapping matches to the regular expression \
    specified by PATTERN. The result is stored in the field specified by FIELDNAME. If FIELDNAME exists, its value is \
    replaced. If FIELDNAME does not exist, it is created. Results are otherwise passed through to the next pipeline \
    processor unmodified.
comment1 = \
    This example counts the number of words in the text of each tweet in the tweets lookup table and puts the result \
    in word_count.
example1 = \
    | inputlookup tweets | countmatches fieldname=word_count pattern="\\w+" text
category = streaming
appears-in = 1.2
maintainer = dnoble
usage = public
tags = searchcommands_app

[filter-command]
syntax = FILTER PREDICATE=<expression> UPDATE=<statements>
alias =
shortdesc = Filters, augments, and updates records on the events pipeline.
description = \
    This command filters records on the events pipeline returning only those for which the PREDICATE is true after \
    applying UPDATE statements. If no PREDICATE is specified, all records are returned. If no UPDATE is specified, \
    records are returned unmodified.\
        The predicate and update operations execute in a restricted scope that includes the standard Python built-in \
    module and the current record. Fields in the record are accessible by name as local variables.
comment1 = \
    This example excludes odd-numbered records and replaces all occurrences of "world" with "Splunk" in the _raw field \
    of the records produced by the generatetext command.
example1 = \
    | generatetext text="Hello world! How the heck are you?" count=6 \
        | filter predicate="(int(_serial) & 1) == 0" update="_raw = _raw.replace('world', 'Splunk')"
category = events
appears-in = 1.5
maintainer = dnoble
usage = public
tags = searchcommands_app

[generatetext-command]
syntax = GENERATETEXT COUNT=<event_count> TEXT=<string>
alias =
shortdesc = Generates a sequence of occurrences of a text string on the streams pipeline.
description = \
    This command generates COUNT occurrences of a TEXT string. Each occurrence is prefixed by its _SERIAL number and \
    stored in the _RAW field of each record.
comment1 = \
    This example generates 10 occurrences of the string "Hello world!".
example1 = | generatetext count=10 text="Hello world!"
category = generating
appears-in = 1.5
maintainer = dnoble
usage = public
tags = searchcommands_app

[simulate-command]
syntax = SIMULATE CSV=<path> RATE=<expected_event_count> INTERVAL=<sampling_period> DURATION=<execution_period> \
    [SEED=<string>]?
alias =
shortdesc = Generates a sequence of events drawn from a csv file using repeated random sampling.
description = \
    This command uses repeated random samples of the event records in CSV for the execution period of DURATION. Sample \
    sizes are determined for each time INTERVAL in DURATION using a Poisson distribution with an average RATE \
    specifying the expected event count during INTERVAL.
comment1 = \
    This example generates events drawn by repeated random sampling of events from population.csv. Events are \
    drawn at an average rate of 50 per second for a duration of 5 seconds. Events are piped to the example \
    countmatches command which adds a word_count field containing the number of words in the text field of each event. \
    The mean and standard deviation of the word_count are then computed by the builtin stats command.
example1 = \
    | simulate csv="/opt/splunk/etc/apps/searchcommands_app/data/population.csv" rate=10 interval=00:00:01 duration=00:00:02 seed=1
category = generating
appears-in = 1.2
maintainer = dnoble
usage = public
tags = searchcommands_app

[sum-command]
syntax = SUM TOTAL=<field> <field-list>
alias =
shortdesc = Computes the sum of a set of numeric fields.
description = \
    This command computes the sum of a set of numeric fields. The TOTAL produced is sum(sum(fieldname, 1, n), 1, N) \
    where n = number of fields in <field-list>, N = number of records processed.
comment1 = This example computes the total number of words in the text field of the tweets lookup table.
example1 = \
    | inputlookup tweets \
           | countmatches fieldname=word_count pattern="\\w+" text \
           | sum total=word_counts word_count
category = reporting
appears-in = 1.2
maintainer = dnoble
usage = public
tags = searchcommands_app
